// Librerias lector 
#include <SPI.h>
#include <MFRC522.h>

#define RST_PIN  9      // constante para referenciar pin de reset
#define SS_PIN  10      // constante para referenciar pin de slave select

boolean compararUID(byte lectura[], byte acceso[]); 

void printUID();
MFRC522 mfrc522(SS_PIN, RST_PIN); // crea objeto mfrc522 enviando pines de slave select y reset

//variables lector
byte UID [4]; //En este arreglo se guardara el valor del UID leido
byte tarjeta[4] = {0x47, 0xB3, 0x57, 0x3C}; //Arreglo que contiene el UID de la tarjeta
byte llavero[4] = {0xAB, 0xFE, 0xBB, 0x1B};  //Arreglo que contiene el UID de la tarjeta

int plataT = 2000;
int plataL = 1500;
int producto = 2000;     


int op = -1;
int enablePin = 7;  // EN1 del L293D
int in1 = 6;        // IN1 del L293D
int in2 = 5;        // IN2 del L293D

int enablePin1 = 2;
int in3 = 4;
int in4 = 3;

void setup()
{
  pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);
  pinMode(12, OUTPUT);
   //Motor 1
  pinMode(enablePin, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
   //Motor 2
  pinMode(enablePin1, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  Serial.begin(9600);
  Serial.println("Sistema listo. Enviar 0, 1 o 2");

  SPI.begin();        // inicializa bus SPI
  mfrc522.PCD_Init();     // inicializa modulo lector
}

void loop()
{
  if (Serial.available() > 0) {
    // Lee el número enviado (puede ser más de un dígito)
    op = Serial.read();
    
    Serial.print("Recibido: ");
    Serial.println(op);

 //lector
//Si se ha recibido op, se plantea si ...
   if ( ! mfrc522.PICC_IsNewCardPresent()) // si no hay una tarjeta presente
    return;         
  if ( ! mfrc522.PICC_ReadCardSerial())   // si no puede obtener datos de la tarjeta
    return; 
//Al pasar la tarjeta  
  printUID();   //se llama a esta funcion que guardara el valor de la UID leido y se lo compara si existe para poder identificar cual es el llavero y la tarjeta

 //Si se pasa la tarjeta
if(compararUID(UID, tarjeta)){
  Serial.println ("Se ha aproximado la Tarjeta");
 
  if(plataT<producto){
    Serial.println("Saldo insuficiente");
     //Se supone que este mensaje lo tiene que leer el otro arduino para pder ejecutar el resto del codigo
  }
  else{
  plataT = plataT - producto;
  Serial.println("Pago realizado");
  ejecutarAccion(op);

  }
 }

 //Si se pasa el llavero , tendria que pasar lo mismo a lo anterior
else if (compararUID(UID,llavero)){
  Serial.println ("Se ha aproximado el Llavero");

 
  if(plataL<producto){
    Serial.println("Saldo insuficiente");
    delay(2000);
  }
  else{
  plataL = plataL - producto;
  Serial.println("Pago realizado");
  ejecutarAccion(op);
  delay(2000);
  }
}
else {
  Serial.println("No hay registro");
}
   mfrc522.PICC_HaltA();                   // detiene comunicacion con tarjeta   

}

}
void ejecutarAccion(int idCodigo) {
  Serial.println("Ejecutando acción para código: ");
  Serial.println(idCodigo);

  switch (idCodigo) {
    case 0:
     
  // Dirección del motor 1
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);

  // Enciende el motor 1
  digitalWrite(enablePin, HIGH);

  // Espera 5 segundos
  delay(5000);

  // Apaga el motor
  digitalWrite(enablePin, LOW);
  
      break;
    case 1:
      
  
  // Dirección del motor 2
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
  
  // Enciende el motor 2
  digitalWrite(enablePin1, HIGH);
  
  // Espera 5 segundos
  delay(5000);
  
  // Apaga el motor
  digitalWrite(enablePin1, LOW);

      break;
    case 2:
      
      break;
    
  }
}




void printUID(){                //Funcion para mostrar en el monitor serie el valor de la UID leida
    Serial.print("UID:");       // muestra texto UID:
  for (byte i = 0; i < mfrc522.uid.size; i++) { // bucle recorre de a un byte por vez el UID, el objeto mfrc522 tiene una fn que permite obtener el tamaño del UID 
    if (mfrc522.uid.uidByte[i] < 0x10){   // si el byte leido es menor a 0x10
      Serial.print(" 0");     // imprime espacio en blanco y numero cero
      }
      else{         
      Serial.print(" ");      // imprime un espacio en blanco
      }
    Serial.print(mfrc522.uid.uidByte[i], HEX);  // imprime el byte del UID leido en hexadecimal 
    UID[i] = mfrc522.uid.uidByte[i];  //Almacenamos el UID leido en el arreglo UID
  } 
  Serial.print("\t");
}  

boolean compararUID(byte lectura[], byte acceso[]){  //Funcion para comparar UID leida con la correposdiente a tarjeta o llavero
  for(byte i = 0;i<mfrc522.uid.size; i++){
    if (lectura[i]!= acceso[i]){
      return (false);
    }
    return(true);
  }
}
